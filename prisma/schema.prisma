generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  image     String?
  
  // Mentor AI specific fields
  role      String   @default("student") // student, mentor, admin
  level     String   @default("beginner") // beginner, intermediate, advanced, expert
  credits   Int      @default(100)
  experience Int     @default(0) // XP points
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())
  lastActivity DateTime @default(now())
  
  // Relations
  goals     Goal[]
  chats     Chat[]
  achievements Achievement[]
  
  @@map("users")
}

model Goal {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  category    String
  targetDate  DateTime
  progress    Int      @default(0)
  status      String   @default("active") // active, completed, paused
  priority    String   @default("medium") // low, medium, high
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}

model Chat {
  id        String   @id @default(uuid())
  userId    String
  title     String
  topic     String?
  status    String   @default("active") // active, completed, archived
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@map("chats")
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  content   String
  role      String   // user, assistant
  type      String   @default("text") // text, goal, reflection, feedback
  metadata  Json?    // Additional data like code snippets, topics, etc.
  createdAt DateTime @default(now())
  
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String
  category    String
  rarity      String   // common, rare, epic, legendary
  points      Int
  unlocked    Boolean  @default(false)
  unlockedAt  DateTime?
  progress    Int      @default(0)
  maxProgress Int
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("achievements")
}